import { Response } from "express";
import { Notification, INotification } from "../models/Notification";
import { User } from "../models/User";
import { AuthenticatedRequest } from "../middleware";
import mongoose from "mongoose";

/**
 * üîî SIMPLIFIED NOTIFICATION CONTROLLER
 * Ch·ªâ gi·ªØ l·∫°i 4 lo·∫°i th√¥ng b√°o c·∫ßn thi·∫øt:
 * 1. üí∞ PAYMENT - N·∫°p ti·ªÅn th√†nh c√¥ng
 * 2. üí≥ POST_PAYMENT - Thanh to√°n tin ƒëƒÉng
 * 3. ‚úÖ POST_APPROVED - Tin ƒëƒÉng ƒë∆∞·ª£c duy·ªát
 * 4. ‚ùå POST_REJECTED - Tin ƒëƒÉng b·ªã t·ª´ ch·ªëi
 *
 * üéØ Khi click v√†o notification s·∫Ω chuy·ªÉn h∆∞·ªõng tr·ª±c ti·∫øp ƒë·∫øn link li√™n quan
 */
export class NotificationController {
  // L·∫•y danh s√°ch notification c·ªßa user
  static async getNotifications(req: AuthenticatedRequest, res: Response) {
    try {
      const userId = req.user?.userId;
      const page = parseInt(req.query.page as string) || 1;
      const limit = parseInt(req.query.limit as string) || 20;
      const type = req.query.type as string;
      const read = req.query.read as string;

      console.log("Query parameters:", { page, limit, type, read });
      console.log("User ID:", userId);

      if (!userId) {
        return res.status(401).json({ message: "Unauthorized" });
      }

      // Build query - CH·ªà CHO PH√âP 4 LO·∫†I TH√îNG B√ÅO
      const query: any = { userId: new mongoose.Types.ObjectId(userId) };

      if (
        type &&
        ["PAYMENT", "POST_PAYMENT", "POST_APPROVED", "POST_REJECTED"].includes(
          type
        )
      ) {
        query.type = type;
      }

      if (read !== undefined) {
        query.read = read === "true";
      }

      const skip = (page - 1) * limit;

      const notifications = await Notification.find(query)
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .lean();

      const total = await Notification.countDocuments(query);
      const unreadCount = await Notification.countDocuments({
        userId: new mongoose.Types.ObjectId(userId),
        read: false,
      });

      res.json({
        success: true,
        data: {
          notifications,
          pagination: {
            page,
            limit,
            total,
            totalPages: Math.ceil(total / limit),
          },
          unreadCount,
        },
      });
    } catch (error) {
      console.error("Error getting notifications:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói khi l·∫•y danh s√°ch th√¥ng b√°o",
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }

  // ƒê√°nh d·∫•u notification ƒë√£ ƒë·ªçc
  static async markAsRead(req: AuthenticatedRequest, res: Response) {
    try {
      const userId = req.user?.userId;
      const { notificationId } = req.params;

      if (!userId) {
        return res.status(401).json({ message: "Unauthorized" });
      }

      if (!mongoose.Types.ObjectId.isValid(notificationId)) {
        return res.status(400).json({
          success: false,
          message: "ID th√¥ng b√°o kh√¥ng h·ª£p l·ªá",
        });
      }

      const notification = await Notification.findOneAndUpdate(
        {
          _id: new mongoose.Types.ObjectId(notificationId),
          userId: new mongoose.Types.ObjectId(userId),
        },
        { read: true },
        { new: true }
      );

      if (!notification) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o",
        });
      }

      res.json({
        success: true,
        message: "ƒê√£ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc",
        data: { notification },
      });
    } catch (error) {
      console.error("Error marking notification as read:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói khi ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc",
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }

  // ƒê√°nh d·∫•u t·∫•t c·∫£ notification ƒë√£ ƒë·ªçc
  static async markAllAsRead(req: AuthenticatedRequest, res: Response) {
    try {
      const userId = req.user?.userId;

      if (!userId) {
        return res.status(401).json({ message: "Unauthorized" });
      }

      const result = await Notification.updateMany(
        {
          userId: new mongoose.Types.ObjectId(userId),
          read: false,
        },
        { read: true }
      );

      res.json({
        success: true,
        message: `ƒê√£ ƒë√°nh d·∫•u ${result.modifiedCount} th√¥ng b√°o ƒë√£ ƒë·ªçc`,
        data: { updatedCount: result.modifiedCount },
      });
    } catch (error) {
      console.error("Error marking all notifications as read:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói khi ƒë√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc",
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }

  // X√≥a notification
  static async deleteNotification(req: AuthenticatedRequest, res: Response) {
    try {
      const userId = req.user?.userId;
      const { notificationId } = req.params;

      if (!userId) {
        return res.status(401).json({ message: "Unauthorized" });
      }

      if (!mongoose.Types.ObjectId.isValid(notificationId)) {
        return res.status(400).json({
          success: false,
          message: "ID th√¥ng b√°o kh√¥ng h·ª£p l·ªá",
        });
      }

      const notification = await Notification.findOneAndDelete({
        _id: new mongoose.Types.ObjectId(notificationId),
        userId: new mongoose.Types.ObjectId(userId),
      });

      if (!notification) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o",
        });
      }

      res.json({
        success: true,
        message: "ƒê√£ x√≥a th√¥ng b√°o",
      });
    } catch (error) {
      console.error("Error deleting notification:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói khi x√≥a th√¥ng b√°o",
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }

  // T·∫°o notification m·ªõi (d√πng internal)
  static async createNotification(
    userId: string | mongoose.Types.ObjectId,
    title: string,
    message: string,
    type: "PAYMENT" | "POST_PAYMENT" | "POST_APPROVED" | "POST_REJECTED", // CH·ªà 4 LO·∫†I
    data?: any
  ): Promise<INotification | null> {
    try {
      const notification = new Notification({
        userId: new mongoose.Types.ObjectId(userId),
        title,
        message,
        type,
        data: data || {},
      });

      await notification.save();
      return notification;
    } catch (error) {
      console.error("Error creating notification:", error);
      return null;
    }
  }

  // L·∫•y s·ªë l∆∞·ª£ng notification ch∆∞a ƒë·ªçc
  static async getUnreadCount(req: AuthenticatedRequest, res: Response) {
    try {
      const userId = req.user?.userId;

      if (!userId) {
        return res.status(401).json({ message: "Unauthorized" });
      }

      const unreadCount = await Notification.countDocuments({
        userId: new mongoose.Types.ObjectId(userId),
        read: false,
      });

      res.json({
        success: true,
        data: {
          unreadCount,
        },
      });
    } catch (error) {
      console.error("Error getting unread count:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói khi l·∫•y s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc",
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }

  // ===== CH·ªà GI·ªÆ L·∫†I 4 HELPER METHODS C·∫¶N THI·∫æT =====

  static async createPaymentNotification(
    userId: string | mongoose.Types.ObjectId,
    amount: number,
    paymentId?: string
  ) {
    return await NotificationController.createNotification(
      userId,
      "üí∞ N·∫°p ti·ªÅn th√†nh c√¥ng",
      `B·∫°n ƒë√£ n·∫°p th√†nh c√¥ng ${amount.toLocaleString(
        "vi-VN"
      )} VNƒê v√†o t√†i kho·∫£n`,
      "PAYMENT",
      { amount, paymentId }
    );
  }

  static async createPostPaymentNotification(
    userId: string | mongoose.Types.ObjectId,
    postTitle: string,
    amount: number,
    postId: string,
    paymentId?: string
  ) {
    return await NotificationController.createNotification(
      userId,
      "üí≥ Thanh to√°n tin ƒëƒÉng",
      `B·∫°n ƒë√£ thanh to√°n ${amount.toLocaleString(
        "vi-VN"
      )} VNƒê cho tin ƒëƒÉng "${postTitle}"`,
      "POST_PAYMENT",
      { postId, postTitle, amount, paymentId }
    );
  }

  static async createPostApprovedNotification(
    userId: string | mongoose.Types.ObjectId,
    postTitle: string,
    postId: string
  ) {
    return await NotificationController.createNotification(
      userId,
      "‚úÖ Tin ƒëƒÉng ƒë∆∞·ª£c duy·ªát",
      `Tin ƒëƒÉng "${postTitle}" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát v√† hi·ªÉn th·ªã c√¥ng khai`,
      "POST_APPROVED",
      { postId, postTitle }
    );
  }

  static async createPostRejectedNotification(
    userId: string | mongoose.Types.ObjectId,
    postTitle: string,
    postId: string,
    reason?: string
  ) {
    return await NotificationController.createNotification(
      userId,
      "‚ùå Tin ƒëƒÉng b·ªã t·ª´ ch·ªëi",
      `Tin ƒëƒÉng "${postTitle}" c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi${
        reason ? `: ${reason}` : ""
      }`,
      "POST_REJECTED",
      { postId, postTitle, reason }
    );
  }

  // ===== X√ìA T·∫§T C·∫¢ ADMIN METHODS =====
  // Kh√¥ng c·∫ßn admin t·∫°o th√¥ng b√°o th·ªß c√¥ng n·ªØa
  // T·∫•t c·∫£ th√¥ng b√°o ƒë·ªÅu t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng:
  // - PAYMENT: t·ª± ƒë·ªông t·ª´ PaymentController (n·∫°p ti·ªÅn)
  // - POST_PAYMENT: t·ª± ƒë·ªông t·ª´ PaymentController (thanh to√°n tin ƒëƒÉng)
  // - POST_APPROVED: t·ª± ƒë·ªông t·ª´ AdminController.approvePost
  // - POST_REJECTED: t·ª± ƒë·ªông t·ª´ AdminController.rejectPost
}
