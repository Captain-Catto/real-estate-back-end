#!/usr/bin/env node

/**
 * Script ƒë·ªÉ fix v√≤ng l·∫∑p v√¥ t·∫≠n v√† restore quy·ªÅn view_statistics cho employee ƒë·ªÉ test
 */

import mongoose from "mongoose";
import path from "path";
import dotenv from "dotenv";

// Load environment variables
dotenv.config({ path: path.join(__dirname, "../.env") });

const MONGODB_URI =
  process.env.MONGODB_URI || "mongodb://localhost:27017/real-estate";

// Import models
import UserPermission from "../src/models/UserPermission";
import { User } from "../src/models/User";

async function connectDb() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log("‚úÖ Connected to MongoDB");
  } catch (err) {
    console.error("‚ùå MongoDB connection error:", err);
    process.exit(1);
  }
}

async function restoreEmployeeStatsPermissions() {
  try {
    console.log("üîß Restoring view_statistics permission for employees...\n");

    // L·∫•y t·∫•t c·∫£ employees
    const employees = await User.find({ role: "employee" });
    console.log(`üë• Found ${employees.length} employees\n`);

    let updatedCount = 0;

    for (const employee of employees) {
      console.log(`üë§ Processing ${employee.username} (${employee.email})`);

      // T√¨m UserPermission record
      let permissions = await UserPermission.findOne({ userId: employee._id });

      if (!permissions) {
        // T·∫°o m·ªõi v·ªõi quy·ªÅn c∆° b·∫£n
        permissions = new UserPermission({
          userId: employee._id,
          permissions: [
            "view_users",
            "view_posts",
            "view_projects",
            "view_news",
            "view_transactions",
            "view_statistics", // Th√™m l·∫°i quy·ªÅn n√†y
            "view_settings",
            "view_locations",
          ],
        });
        await permissions.save();
        console.log("   ‚úÖ Created new permissions with view_statistics");
        updatedCount++;
      } else {
        // Ki·ªÉm tra v√† th√™m view_statistics n·∫øu ch∆∞a c√≥
        if (!permissions.permissions.includes("view_statistics")) {
          permissions.permissions.push("view_statistics");
          await permissions.save();
          console.log("   ‚úÖ Added view_statistics permission");
          updatedCount++;
        } else {
          console.log("   ‚ÑπÔ∏è  Already has view_statistics permission");
        }
      }
    }

    console.log(`\nüìä Summary: Updated ${updatedCount} employees`);

    // Verify
    console.log("\nüîç Verifying permissions...\n");
    for (const employee of employees) {
      const permissions = await UserPermission.findOne({
        userId: employee._id,
      });
      const hasStats =
        permissions?.permissions.includes("view_statistics") || false;
      console.log(
        `üë§ ${employee.username}: ${hasStats ? "‚úÖ" : "‚ùå"} view_statistics`
      );
    }
  } catch (error) {
    console.error("‚ùå Error restoring permissions:", error);
    throw error;
  }
}

async function main() {
  try {
    await connectDb();
    await restoreEmployeeStatsPermissions();
    console.log("\nüéâ Successfully restored employee permissions!");
  } catch (error) {
    console.error("‚ùå Script failed:", error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log("\n‚úÖ Disconnected from MongoDB");
  }
}

// Ch·∫°y script
main();

export { restoreEmployeeStatsPermissions };
