import mongoose from "mongoose";
import { config } from "dotenv";
import UserPermission from "../src/models/UserPermission";
import { User } from "../src/models/User";

config();

const MONGODB_URI =
  process.env.MONGODB_URI || "mongodb://localhost:27017/real-estate";

async function testPermissionSystem() {
  try {
    // K·∫øt n·ªëi MongoDB
    await mongoose.connect(MONGODB_URI);
    console.log("‚úÖ Connected to MongoDB");

    console.log("\nüîç KI·ªÇM TRA H·ªÜ TH·ªêNG PERMISSION");
    console.log("=".repeat(50));

    // 1. Ki·ªÉm tra Admin permissions
    const admins = await User.find({ role: "admin" }).select("username");
    console.log(`\nüëë ADMIN USERS (${admins.length}):`);

    for (const admin of admins) {
      const permissions = await UserPermission.findOne({ userId: admin._id });
      console.log(
        `  ‚Ä¢ ${admin.username}: ${
          permissions?.permissions.length || 0
        } permissions`
      );

      if (permissions) {
        const postPermissions = permissions.permissions.filter((p) =>
          p.includes("post")
        );
        console.log(`    üìù Post permissions: ${postPermissions.join(", ")}`);
      }
    }

    // 2. Ki·ªÉm tra Employee permissions
    const employees = await User.find({ role: "employee" }).select("username");
    console.log(`\nüë§ EMPLOYEE USERS (${employees.length}):`);

    let employeesWithEditPost = 0;
    let employeesWithApprovePost = 0;
    let employeesWithRejectPost = 0;
    let employeesWithDeletePost = 0;

    for (const employee of employees) {
      const permissions = await UserPermission.findOne({
        userId: employee._id,
      });
      console.log(
        `  ‚Ä¢ ${employee.username}: ${
          permissions?.permissions.length || 0
        } permissions`
      );

      if (permissions) {
        const postPermissions = permissions.permissions.filter((p) =>
          p.includes("post")
        );
        console.log(`    üìù Post permissions: ${postPermissions.join(", ")}`);

        // Count specific permissions
        if (postPermissions.includes("edit_post")) employeesWithEditPost++;
        if (postPermissions.includes("approve_post"))
          employeesWithApprovePost++;
        if (postPermissions.includes("reject_post")) employeesWithRejectPost++;
        if (postPermissions.includes("delete_post")) employeesWithDeletePost++;
      }
    }

    // 3. Summary statistics
    console.log(`\nüìä TH·ªêNG K√ä PERMISSIONS:`);
    console.log(
      `  ‚úèÔ∏è  Edit Post: ${employeesWithEditPost}/${
        employees.length
      } employees (${Math.round(
        (employeesWithEditPost / employees.length) * 100
      )}%)`
    );
    console.log(
      `  ‚úÖ Approve Post: ${employeesWithApprovePost}/${
        employees.length
      } employees (${Math.round(
        (employeesWithApprovePost / employees.length) * 100
      )}%)`
    );
    console.log(
      `  ‚ùå Reject Post: ${employeesWithRejectPost}/${
        employees.length
      } employees (${Math.round(
        (employeesWithRejectPost / employees.length) * 100
      )}%)`
    );
    console.log(
      `  üóëÔ∏è  Delete Post: ${employeesWithDeletePost}/${
        employees.length
      } employees (${Math.round(
        (employeesWithDeletePost / employees.length) * 100
      )}%)`
    );

    // 4. Ki·ªÉm tra frontend implementation
    console.log(`\nüéØ FRONTEND IMPLEMENTATION STATUS:`);
    console.log(
      `  ‚úÖ AdminPostDetail: PermissionGuard implemented for Edit, Approve, Reject, Delete buttons`
    );
    console.log(
      `  ‚úÖ PostsTable: PermissionGuard implemented for Approve, Reject, Delete buttons`
    );
    console.log(
      `  ‚úÖ Page Protection: PagePermissionGuard implemented for post management pages`
    );

    // 5. Backend implementation
    console.log(`\nüîß BACKEND IMPLEMENTATION STATUS:`);
    console.log(
      `  ‚úÖ AdminController: Permission-based validation for edit operations`
    );
    console.log(`  ‚úÖ Employee can edit if has edit_post permission`);
    console.log(
      `  ‚úÖ Employee can only change status if no edit_post permission`
    );

    console.log(`\nüéâ H·ªÜ TH·ªêNG PERMISSION HO√ÄN TH√ÄNH!`);
    console.log(`  ‚Ä¢ Employee c√≥ quy·ªÅn edit_post: c√≥ th·ªÉ s·ª≠a t·∫•t c·∫£ fields`);
    console.log(`  ‚Ä¢ Employee kh√¥ng c√≥ quy·ªÅn: ch·ªâ c√≥ th·ªÉ thay ƒë·ªïi status`);
    console.log(`  ‚Ä¢ Admin: c√≥ t·∫•t c·∫£ quy·ªÅn`);
    console.log(`  ‚Ä¢ Frontend: s·ª≠ d·ª•ng PermissionGuard ƒë·ªÉ hi·ªÉn th·ªã/·∫©n n√∫t`);
    console.log(
      `  ‚Ä¢ Backend: validation permission tr∆∞·ªõc khi th·ª±c hi·ªán action`
    );
  } catch (error) {
    console.error("‚ùå Error:", error);
  } finally {
    await mongoose.disconnect();
    console.log("\nüëã Disconnected from MongoDB");
  }
}

testPermissionSystem();
